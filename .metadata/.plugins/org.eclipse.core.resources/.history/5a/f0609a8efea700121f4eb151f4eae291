// http://www.mosync.com/documentation/manualpages/sql-database-api

<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=320, user-scalable=no">
		<meta http-equiv="Content-type" content="text/html; charset=utf-8">
		<title>Memory Game</title>    
  
  
  <link rel="stylesheet" href="css/themes/default/jquery.mobile-1.3.0.min.css">
  <link rel="stylesheet" href="css/owncss.css">
  <script type="text/javascript" charset="utf-8" src="js/wormhole.js"></script>
  <script src="js/jquery.js"></script>  
  <script src="js/jquery.mobile-1.3.0.js"></script> 
  <script src="js/jquery.cookie.js"></script>
  <script src="jquery.Storage.js"></script> 
  <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />
  <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
  <script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
  <link rel="stylesheet" href="/resources/demos/style.css" />
  <script type="text/javascript">
  
  
  
 var app = function()
		{
			var app = {};

			// Get the score of the named player,
			// result and success status is passed to
			// the callback function:
			// callbackFun(score, success)
			function getScore(name, callbackFun)
			{
				mosync.bridge.send(
					["Custom", "GetScore", name],
					function(scoreString, success)
					{
						// If the score was successfully retrieved,
						// we convert it to an int (it is passed as 
						// a string).
						var score = scoreString;
						if (success)
						{
							score = parseInt(scoreString);
						}
						callbackFun(score, success);
					});
			}

			// Set the score of the named player,
			// success status and a status message is
			// passed to the callback function:
			// callbackFun(message, success)
			function setScore(name, score, callbackFun)
			{
				mosync.bridge.send(
					["Custom", "SetScore", name, score],
					callbackFun);
			}

			function incrementPlayer(name, points)
			{
				// First get the score.
				getScore(
					name,
					// Function that receives the score.
					function(score, success)
					{
						// Check that we got a valid score.
						if (!success) { return; }

						if (points > 1)
						{
							// For points above 1 we double the score.
							score = score * 2;
						}
						else
						{
							// Otherwise we just add to the score.
							score = score + points;
						}

						// Set the new score, we don't care
						// about the result callback.
						setScore(
							name,
							score,
							function(message, success) {});
					});
			}

			function rollWheel()
			{
				return 1 + Math.floor(Math.random() * 51);
			}

			function status(text)
			{
				document.getElementById("gameStatus").innerHTML = text;
			}

			app.displayScore = function()
			{
				getScore("Me", function(score, success) {
					document.getElementById("myScore").innerHTML = score; });
				getScore("You", function(score, success) {
					document.getElementById("yourScore").innerHTML = score; });
			};

			function playOneTurn(factor)
			{
				var delay = 1000;
				var myScore = 0;
				var yourScore = 0;

				status("I roll the wheel...");
				setTimeout(function() {
					var myScore = rollWheel() * factor;
					status("I got " + myScore);
					setTimeout(function() {
						status("You roll the wheel...");
						setTimeout(function() {
							var yourScore = rollWheel();
							status("You got " + yourScore);
							setTimeout(function() {
								if (myScore > yourScore)
								{
									status("I win!");
									incrementPlayer("Me", 1);
								}
								else
								{
									status("You win!");
									incrementPlayer("You", factor);
								}
								setTimeout(function() {
									app.displayScore();
									setTimeout(function() {
										status("Touch a button to play again!");
									},
									delay);
								},
								delay);
							},
							delay);
						},
						delay);
					},
					delay);
				},
				delay);
			};

			app.playLowRisk = function()
			{
				playOneTurn(1);
			};

			app.playHighRisk = function()
			{
				playOneTurn(2);
			};

			app.resetScore = function()
			{
				// These call will be handled sequentially by
				// the underlying implementation, so we need
				// only to display the updated score in the
				// last result callback.
				setScore("You", 0, function(message, success) {});
				setScore("Me", 0, function(message, success) { app.displayScore(); });
			};

			return app;
		}();

		/**
		 * Initialization.
		 */
		function initialize()
		{
			// Closes the application when the back key is pressed.
			document.addEventListener(
				"backbutton",
				function()
				{
					mosync.app.exit();
				},
				true);

			app.displayScore();
		}

		// Call initialize when document has loaded.
		document.addEventListener(
			"DOMContentLoaded",
			initialize,
			false);
		</script>
	</head>
	<body>
		<div id="screen">
			<div class="pane" id="heading">Play Me v2</div>
			<div class="pane button" onclick="app.playLowRisk();">Play Low Risk</div>
			<div class="pane button" onclick="app.playHighRisk();">Play High Risk</div>
			<div class="pane" id="info">
				<div class="infoItem"><span id="gameStatus">Touch a button to play!</span></div>
				<div class="infoItem">Your score: <span id="yourScore">&nbsp;</span></div>
				<div class="infoItem">My score: <span id="myScore">&nbsp;</span></div>
			</div>
			<div class="pane" id="info">
				<div class="infoItem">
				Rules are simple! Beat me if you can! If you pick low risk we play at equal terms,
				at high risk you can gain more, but you stand a higher chance of loosing!
				Can you beat me in 10 turns? Can you endure 100 turns?
				</div>
			</div>
			<div class="pane button" onclick="app.resetScore();">Reset Score</div>
		</div>
		<div></div>
	</body>
</html>