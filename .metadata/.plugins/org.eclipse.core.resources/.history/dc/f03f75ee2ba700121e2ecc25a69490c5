/**
 * @file main.cpp
 *
 * This file contains the support code at the C++ level for
 * an HTML5/JS application that has access to device services.
 *
 * You don't need to change anything in this code file unless
 * you wish to add support for functions that are not available
 * out-of-the box in wormhole.js.
 */

#include <Wormhole/HybridMoblet.h>
#include "MAHeaders.h" // Defines BEEP_WAV
#include <ma.h>
#include <maassert.h>
#include <conprint.h>
#include <MAUtil/String.h>
#include <MAUtil/FileLister.h>



// Namespaces we want to access.
using namespace NativeUI; // WebView widget.
using namespace Wormhole; // Wormhole library.

/**
 * The application class.
 */
class MyMoblet : public HybridMoblet
{
public:
	MyMoblet()
	{
		// Show the start page.
		showPage("index.html");
		maScreenSetOrientation(SCREEN_ORIENTATION_LANDSCAPE);
		// Set the sound used by the PhoneGap beep notification API.
		// BEEP_WAV is defined in file Resources/Resources.lst.
		setBeepSound(BEEP_WAV);
	}
};

static int getSystemProperty(const char* key, MAUtil::String& dst) {
    int size = maGetSystemProperty(key, NULL, 0);
    if(size < 0)
        return size;
    dst.resize(size-1);
    maGetSystemProperty(key, dst.pointer(), size);
    return size;
}

static MAUtil::String getLocalPath() {
    // Do this here to work around a MoRE bug.
    FileLister fl;
    fl.start("/");
    MAUtil::String path;
    // Try getting the local path.
    int result = getSystemProperty("mosync.path.local", path);
    // If it works, fine.
    if(result > 0) {
        printf("Got local path: %i\n", result);
        return path + "/";
    }

    // Otherwise, get the first root directory.
    fl.start("");
    result = fl.next(path);
    MAASSERT(result > 0);
    return path;
}

static bool tryToRead() {
    // Construct the filename.
    MAUtil::String filename = getLocalPath() + "foo.txt";

    // Open the file handle.
    printf("Open '%s'\n", filename.c_str());
    MAHandle file = maFileOpen(filename.c_str(), MA_ACCESS_READ);
    if(file < 0) {
        printf("Error %i\n", file);
        return false;
    }

    // Check if the file exists.
    int res = maFileExists(file);
    MAASSERT(res >= 0);
    if(!res) {
        printf("File does not exist.\n");
        maFileClose(file);
        return false;
    }

    // Get the file size.
    int size = maFileSize(file);
    printf("Size: %i\n", size);
    MAASSERT(size >= 0);

    // Read the file data.
    static char data[64];
    MAASSERT(size < (int)sizeof(data));
    res = maFileRead(file, data, size);
    MAASSERT(res == 0);

    // Print some data.
    data[32] = 0;
    printf("%s\n", data);

    // Close the file.
    printf("Closing...\n");
    res = maFileClose(file);
    MAASSERT(res == 0);

    printf("Done.\n");
    return true;
}

static bool tryToWrite() {
    // Construct the filename.
    MAUtil::String filename = getLocalPath() + "foo.txt";

    // Open the file handle.
    printf("Open '%s'\n", filename.c_str());
    MAHandle file = maFileOpen(filename.c_str(), MA_ACCESS_READ_WRITE);
    if(file < 0) {
        printf("Error %i\n", file);
        return false;
    }

    // If the file exists...
    int res = maFileExists(file);
    MAASSERT(res >= 0);
    if(res) {
        // Truncate it, deleting any old data.
        printf("Truncating file...\n");
        res = maFileTruncate(file, 0);
        MAASSERT(res == 0);
    } else {
        // Otherwise, create it.
        printf("Creating file...\n");
        res = maFileCreate(file);
        MAASSERT(res >= 0);
    }
    // In either case, we now have an empty file at our disposal.

    // Write some data.
    static const char data[] = "This data is written to the file.";
    res = maFileWrite(file, data, sizeof(data));
    MAASSERT(res == 0);

    // Close the file.
    printf("Closing...\n");
    res = maFileClose(file);
    MAASSERT(res == 0);

    printf("Done.\n");
    return true;
}

extern "C" int MAMain() {
    InitConsole();
    gConsoleLogging = 1;
    printf("Hello World!\n");

    if(!tryToRead())
        tryToWrite();

    FREEZE;
}







/**
 * Main function that is called when the program starts.
 * Here an instance of the MyMoblet class is created and
 * the program enters the main event loop.
 */

extern "C" int MAMain()
{
	(new MyMoblet())->enterEventLoop();
	return 0;
}





